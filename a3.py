# -*- coding: utf-8 -*-
"""a3.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ntwJcxlrnRpekQOrQQyf5SCfm9qQNwW
"""

'''
--------------------------------------------------------------------------------
Created by:

Anastasia Borisova (aborisso)
Christina Mu Du(mdu4)
Mahin Doshi (mdoshi)

Last build: 9th March, 2019
Collaboration: Not collaborated with any other group
Questions executed as per spec on eclass

--------------------------------------------------------------------------------
'''

import sqlite3
import pandas as panda
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Enter the datbase destination
database_destination = input("Enter datbase location : ")

def main():
    while True:
        print('1. Question 1 \t2. Question 2 \n3. Question 3 \t4. Question 4 \n5. Question 5 \t6. Question 6')
        print("[Enter 1-6, depending on the question wanted],\n[Enter 7 to exit]\n")
        try:
            choice = input("Select the question to be viewed ")
            choice = int(choice)
            if choice > 7 or choice <= 0:
                print('\n Not a valid choice \n')
        except ValueError:
            print('Not a valid choice')



        if choice == 1:
            question1()
        elif choice == 2:
            question2()
        elif choice == 3:
            question3()
        elif choice == 4:
            question4()
        elif choice == 5:
            question5()
        elif choice == 6:
            question6()
        elif choice == 7:
            break


def question1():
    global connection, cursor

    conn = sqlite3.connect(database_destination)
    c = conn.cursor()

    # show all papers
    for row in c.execute('select * from papers limit 5;'):
        print(row)

    # find number of rows
    row_num = 0
    for row in c.execute('select * from papers;'):
        row_num += 1

    # allow one paper to be selected
    offset = 0
    while True:
        try:
            paper = input("Select a paper or view different papers(p/n): ")

            # check if need to go to a next page
            if paper == 'n':
              offset += 5
              # make sure we don't go out of range
              if offset > row_num:
                print("Out of range")
                offset -= 5
                continue
              # show papers on next page
              format_str = '''select * from papers limit 5 offset {offsetNum};'''
              sql_command = format_str.format(offsetNum = offset)
              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()
              for row in rows:
                print(row)

            # check if need to go to a previous page
            elif paper == 'p':
              offset -= 5
              # make sure we don't go out of range
              if offset < 0:
                print("Out of range")
                offset += 5
                continue
              # show papers on next page
              format_str = '''select * from papers limit 5 offset {offsetNum};'''
              sql_command = format_str.format(offsetNum = offset)
              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()
              for row in rows:
                print(row)

            # if something else is entered
            else:
              paper = int(paper)

              # check if paper exists
              format_string = '''
              select Id
              from papers
              where papers.Id = '{paperId}';'''

              sql_command = format_string.format(paperId = paper)

              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()

              # paper doesn't exist:
              if str(rows) == '[]':
                print("Wrong paper. Try again")

              # paper exists:
              else:
                # show email of all reviewers that have reviewed the paper
                format_str ='''
                select r.reviewer
                from reviews r
                where r.paper = '{paperId}';'''

                sql_command = format_str.format(paperId = paper)

                c.execute(sql_command)
                conn.commit()

                rows = c.fetchall()

                # check if there are any reviewers:
                if str(rows) == '[]':
                  print("No reviewers")
                  break
                else:
                  print(rows)
                  break
        except ValueError:
            print("Please enter a valid value")


def question2():
    global connection, cursor

    conn = sqlite3.connect(database_destination)
    c = conn.cursor()

    # show all papers
    for row in c.execute('select * from papers limit 5;'):
        print(row)

    # find number of rows
    row_num = 0
    for row in c.execute('select * from papers;'):
        row_num += 1

    # allow one paper to be selected
    offset = 0
    while True:
        try:
            paper = input("Select a paper or view different papers(P/N): ")

            # check if need to go to a next page
            if paper == 'n':
              offset += 5
              # make sure we don't go out of range
              if offset > row_num:
                print("Out of range")
                offset -= 5
                continue
              # show papers on next page
              format_str = '''select * from papers limit 5 offset {offsetNum};'''
              sql_command = format_str.format(offsetNum = offset)
              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()
              for row in rows:
                print(row)

            # check if need to go to a previous page
            elif paper == 'p':
              offset -= 5
              # make sure we don't go out of range
              if offset < 0:
                print("Out of range")
                offset += 5
                continue
              # show papers on next page
              format_str = '''select * from papers limit 5 offset {offsetNum};'''
              sql_command = format_str.format(offsetNum = offset)
              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()
              for row in rows:
                print(row)

            # if something else is entered
            else:
              paper = int(paper)

              # check if paper exists
              format_string = '''
              select Id
              from papers
              where papers.Id = '{paperId}';'''

              sql_command = format_string.format(paperId = paper)

              c.execute(sql_command)
              conn.commit()
              rows = c.fetchall()

              # paper doesn't exist:
              if str(rows) == '[]':
                print("Invalid paper, please enter another one.")

              # paper exists:
              else:
                format_str ='''
            select reviewer  from
                 (
                 select  reviewer
                 from papers p
                 left join expertise e on e.area = p.area
                 where p.id = '{paperId1}'
                 )

                 intersect

                 select reviewer from
                (
                select distinct reviewer
                from expertise

                except

                select distinct reviewer
                from papers p
                inner join reviews r on p.id = r.paper
                where p.id = '{paperId1}');'''

                sql_command = format_str.format(paperId1 = paper, paperId2 = paper)

                c.execute(sql_command)
                conn.commit()

                rows = c.fetchall()
                print(rows)
                break
        except ValueError:
          print("Please enter a valid value")

def question3():
    ''' Given a number range, find all reviewers whose number of reviews
    is in that range (the range should include the bounds) '''

    '''
    PROCESS:
    get the no of reviews each reviever has given.
    then take the range from the user
    check which reviewers fall in that range.
    print those reviewers
    '''
    sql_query = "select reviewer,count(reviewer) \
                    from reviews  \
                    group by reviewer"

    q3 = sqlite3.connect(database_destination)
    query = q3.cursor()
    query.execute(sql_query)
    rows = query.fetchall()
    q3.commit()

    print("Enter the range: ")
    while True:
        try:
            lower_bound = input("Enter the lower bound: ")
            lower_bound = int(lower_bound)
            break
        except ValueError:
            print("not a valid choice, enter an integer.")

    while True:
        try:
            upper_bound = input("Enter the upper bound: ")
            upper_bound = int(upper_bound)
            break
        except ValueError:
            print("Not a valid choice, enter an integer")

    # print out all revierwers who have reviewed papers in the range the user
    # has inputted. (including the bounds)
    for row in rows:
        if (row[1] >= int(lower_bound)) and (row[1] <= int(upper_bound)):
            print(row[0])
           

def question4():
    global connection, cursor

    conn = sqlite3.connect(database_destination)
    c = conn.cursor()

    # choose between options:
    while True:
        try:
            option = int(input("Summary or individual? (input 1 for summary or 2 for individual): "))
            if (option != 1) and (option != 2):
              print("Please enter a valid integer")
            else:
              break
        except ValueError:
            print("Please enter a valid integer")

    # if summary: show plot
    if option == 1:
      df = pd.read_sql_query("select author, count(csession) as 'count' from  papers where decision = 'A' group by author", conn)
      plot = df.plot.bar(x = "author")
      plt.plot()
      plt.show()

    #if individual:
    elif option == 2:
      # show all authors who have accepted papers
      for row in c.execute("select distinct author from  papers where decision = 'A'"):
        print(row)

      # choose one author and show number of section author participates in
      while True:
        try:
          author = str(input("Which author?: "))
          if author == '':
            print("Please enter a valid author")
          else:
            # show in how many sections this author is
            format_str ='''
            select author, count(*)
            from  papers
            where author = '{authorEmail}'
            and decision = 'A';
            '''
            sql_command = format_str.format(authorEmail = author)
            c.execute(sql_command)
            conn.commit()

            rows = c.fetchall()
            # check if author exists
            if str(rows) == '[(None, 0)]':
              print("Wrong input. This author doesn't exist. Try again")
            else:
              print(rows)
              break
        except ValueError:
          print("Please enter a valid author")


def question5():
    global connection, cursor

    conn = sqlite3.connect(database_destination)
    c = conn.cursor()

    # select top 5 most popular areas / ties are taken into account
    sql_query = "select area, count(area) as finalcounter from papers group by area having count(area) in (select distinct count(area) as counter from papers group by area order by count(area) desc limit 5) order by count(area) desc;"
    df = pd.read_sql_query(sql_query, conn)

    plot = df.plot.pie(labels = df.area, y = "finalcounter")
    plt.plot()
    plt.show()

    conn.commit()

def question6():
    ''' For each reviewer, give a bar chart of their
    average review scores for each category.
    You must return a single grouped bar chart.

    PROCESS:
    getting the average score for each category.Then create a
  7  stacked bar chart with the average scores of each reviewer.

    '''

    sql_query = "select reviewer, avg(originality) as \"originality average\", \
                avg(importance) as \"importance average\", avg(soundness) as \"soundness average\"\
                from reviews  \
                group by reviewer;"

    q6 = sqlite3.connect(database_destination)
    dataframe = panda.read_sql_query(sql_query, q6)
    #plotting bar chart, setting reviwers as x-axis label.
    dataframe.plot.bar(x = 'reviewer')
    plt.plot()
    plt.show()


main()